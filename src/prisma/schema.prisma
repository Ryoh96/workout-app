// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  gender        Gender     @default(OTHER)
  height        Float?
  weight        Float?
  notes         Note[]
  exercises     Exercise[]
  menus         Menu[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id            String     @id @default(uuid())
  name          String     
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  parts         Part[]
  trainings     Training[]
  movieUrl      String[]
  articleUrl    String[]
  memos         Memo[]
  maxWeight     Float?
  maxWeightUnit Unit?
  maxTotalLoad  Float?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  menus         Menu[]
}

model Part {
  id        String     @id @default(uuid())
  name      String
  exercises Exercise[]
}

model Note {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  trainings Training[]
  createdAt DateTime   @default(now())
  date DateTime
  memos String[]
}

model Training {
  id         String   @id @default(uuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId     String
  memo       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rounds     Round[]
}

model Round {
  id         String   @id @default(uuid())
  weight     Float
  unit       Unit
  repetition Int
  interval   Int?
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId String
  memo       Memo?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Memo {
  id         String   @id @default(uuid())
  content    String
  round      Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  roundId    String   @unique
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
  pin        Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Menu {
  id       String     @id @default(uuid())
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Exercise Exercise[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Unit {
  KG
  LB
}
