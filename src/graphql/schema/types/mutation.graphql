type Mutation {
  createExerciseAtNote(name: String!, parts: [String!]): Exercise
  addExerciseByPart(name: String!, partId: ID!): Exercise
  renameExercise(id: ID!, name: String!): Exercise!
  deleteExercise(id: ID!): Exercise!
  
  createTraining(noteId: ID!, exerciseId: ID!, id: ID!): Training
  removeTraining(id: ID!): Training

  addRound(input: AddRoundInput!): Round
  editRound(input: EditRoundInput!): Round
  removeRound(id: ID!): Round
  
  createNote(date: DateTime!): Note!
  deleteNote(id: ID!): Note!

  deleteMemo(id: ID!): Memo

  upsertMemoAtNote(id: ID!, memo: String!, index: Int): Note!
  deleteMemoAtNote(id: ID!, index: Int!): Note!
}

input RoundInput {
  weight: Float!
  repetition: Int!
  unit: Unit!
  interval: Int
  memo: String
  isPinned: Boolean
}

input AddRoundInput {
  exerciseId: ID!
  trainingId: ID!
  roundInput: RoundInput!
}

input EditRoundInput {
  id: ID!
  roundInput: RoundInput!
}
